using System.Collections;
using System.Collections.Generic;
using UnityEngine.SceneManagement;
using UnityEngine.UI;
using UnityEngine;

public class TutorialUIMrg : MonoBehaviour
{
    public static TutorialUIMrg Instance;

    public GameObject letter;           // 편지
    public GameObject letterHead;       // 편지지
    public Transform mainCamera;
    public GameObject Report1;
    public Text Day;
    public Text Gold;
    float smooth = 3.0f;

    Vector3 sideVector;

    // Use this for initialization
    void Awake ()
    {
        if (Instance == null)
            Instance = this;
        else if (Instance != this)
            Destroy(this.gameObject);

        sideVector = new Vector3(18.43f, 0f,-10f);
    }

    public void setNextDay()
    {


        TutorialMrg.Instance.isBackMain = true;
        SceneMrg.sceneMrg.NextScene(8);
        //TutorialData.Instance.Gold.text = 200.ToString();
        //TutorialData.Instance.Day.text = 28.ToString();
    }


    public void TutorialNextSecne()
    {
        if (!TutorialMrg.Instance.textBox.activeSelf)
            SceneMrg.sceneMrg.NextScene(10);
    }

    public void OpenLeteer()
    {
        if (!TutorialMrg.Instance.textBox.activeSelf && !TutorialMrg.Instance.isBackMain)
        {
            letter.active = false;
            letterHead.active = true;
        }
    }

    public void OpenReport()
    {
        if (!TutorialMrg.Instance.textBox.activeSelf && TutorialMrg.Instance.line >= 20)
            Report1.SetActive(true);
    }

    public void AanswerLetter(bool _answer)
    {
        if (!TutorialMrg.Instance.textBox.activeSelf)
        {
            letterHead.active = false;
            MoveCameraLeft();
        }
    }

    public void MoveCameraLeft()
    {
        StartCoroutine(MoveLeft());
    }

    IEnumerator MoveLeft()
    {
        while (mainCamera.position.x <= sideVector.x - 0.01)
        {
            mainCamera.transform.position = Vector3.Lerp(new Vector3(mainCamera.transform.position.x, 0, mainCamera.transform.position.z), sideVector, Time.deltaTime * smooth);
            yield return new WaitForSeconds(0.005f);
        }
    }
}
