using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class InGameMrg_Main : MonoBehaviour
{
    public static InGameMrg_Main inGame_mrg_main;

    public EventContents Quest;

    void Awake()
    {
        if (inGame_mrg_main == null)
            inGame_mrg_main = this;
        else if (inGame_mrg_main != this)
            Destroy(this.gameObject);

        DontDestroyOnLoad(this.gameObject);
    }

    void OnEnable()
    {
        SetQuset();
    }

    void SetQuset()
    {
        Quest = DataMrg.dataMrg.SetContentsData();
    }

   public void SetAnwserData(bool _anwser)
    {
        //int _spendGold, spendDay, upVolume, downVolume;
        //string whatPowerUp, whatPowerDown;

        //////// 수락했을 경우의 호감도가 오르는 세력들
        char[] YupPowerArr = new char[6];
        string[] YupPowerArrData = new string[6];
        int YupCount = 0;
        //////// 수락했을 경우의 호감도가 내려가는 세력들
        char[] YdownPowerArr = new char[6];
        string[] YdownPowerArrData = new string[6];
        int YdownCount = 0;
        // 거절했을 경우의 호감도가 내려가는 세력들
        char[] NdownPowerArr = new char[6];
        string[] NdownPowerArrData = new string[6];
        int NdownCount = 0;
        // 거절했을 경우의 호감도가 내려가는 세력들
        char[] NupPowerArr = new char[6];
        string[] NupPowerArrData = new string[6];
        int NupCount = 0;

        //////// 수락했을 경우의 호감도가 오르는 세력들
        for (int i = 0; i < Quest.YwhatPowerUp.Length; i++)
        {
            if (Quest.YwhatPowerUp[i] != ',')
            {
                YupPowerArr[i] = Quest.YwhatPowerUp[i];
                YupPowerArrData[i] = "2" + YupPowerArr[i];
                YupCount++;
            }
        }
        //////// 수락했을 경우의 호감도가 내려가는 세력들
        for (int i = 0; i < Quest.YwhatPowerDown.Length; i++)
        {
            if (Quest.YwhatPowerDown[i] != ',')
            {
                YdownPowerArr[i] = Quest.YwhatPowerDown[i];
                YdownPowerArrData[i] = "2" + YdownPowerArr[i];
                YdownCount++;
            }
        }

        // 거절했을 경우의 호감도가 내려가는 세력들
        for (int i = 0; i < Quest.NwhatPowerDown.Length; i++)
        {
            if (Quest.NwhatPowerDown[i] != ',')
            {
                NdownPowerArr[i] = Quest.NwhatPowerDown[i];
                NdownPowerArrData[i] = "2" + NdownPowerArr[i];
                NdownCount++;
                Debug.Log("NdownCount : " + NdownCount);
            }
        }

        // 거절했을 경우의 호감도가 내려가는 세력들
        for (int i = 0; i < Quest.NwhatPowerUp.Length; i++)
        {
            if (Quest.NwhatPowerUp[i] != ',')
            {
                NupPowerArr[i] = Quest.YwhatPowerUp[i];
                NupPowerArrData[i] = "2" + NupPowerArr[i];
                NupCount++;
            }
        }

        ///////////////////////////////////////////////////////////////////
        // 수락했을 경우의 처리
        if (_anwser)
        {
            DataMrg.dataMrg.InputData(10, Quest.YspendDay);
            DataMrg.dataMrg.InputData(11, Quest.YspendGold);

            // 호감도 업
            for (int i = 0; i < YupCount; i++)
                DataMrg.dataMrg.InputData(int.Parse(YupPowerArrData[i]),Quest.YupVolume);
            // 호감도 다운
            for (int i = 0; i < YdownCount; i++)
            {
                DataMrg.dataMrg.InputData(int.Parse(YdownPowerArrData[i]), -Quest.YdownVolume);
            }
        }
        // 거절했을 경우의 처리
        else
        {
            DataMrg.dataMrg.InputData(10, Quest.NspendDay);
            DataMrg.dataMrg.InputData(11, Quest.NspendGold);

            // 호감도 업
            for (int i = 0; i < NupCount; i++)
                DataMrg.dataMrg.InputData(int.Parse(NupPowerArrData[i]), Quest.NupVolume);
            // 호갑도 다운
            for (int i = 0; i < NdownCount; i++)
                DataMrg.dataMrg.InputData(int.Parse(NdownPowerArrData[i]), -Quest.NdownVolme);
        }
    }
}
