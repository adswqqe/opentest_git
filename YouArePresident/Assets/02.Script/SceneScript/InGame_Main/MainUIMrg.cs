using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class MainUIMrg : MonoBehaviour
{
    public static MainUIMrg Instance;

    public Sprite[] BtnSprite;
    public GameObject[] powerBarSilder = new GameObject[6];
    public GameObject powerReport;
    public GameObject letter;           // 편지
    public GameObject letterHead;       // 편지지
    public Text contentsText;           // 편지 내용
    public Image powerMark;
    public Text leaderName;
    public Transform mainCamera;
    public Image EFF;
    public Image BGM;
    Vector3 startVector;
    Vector3 sideVector;
    float smooth = 3.0f;
    bool isSelect = false;

    void Awake()
    {
        if (Instance == null)
            Instance = this;
        else if (Instance != this)
            Destroy(this.gameObject);

        startVector = mainCamera.position;
        sideVector = new Vector3(18.43f, 0f,-10f);

        DataReset();

    }

    void Start()
    {

        if (SoundMrg.Instance.isBGMOff)
            SoundMrg.Instance.StartBGM(0);
        mainCamera.position = startVector;
        Invoke("SetDisplayUI", 0.02f);  // 로딩 때 컨텐츠가 로딩되고 IngameMrg가 퀘스트를 받오기까지의 딜레이를 기다린다.
        if(!DataMrg.dataMrg.isfrist)
        InGameMrg_Main.inGame_mrg_main.CallSetPowerReport();
    }

    public void DataReset()
    {
        for (int i = 0; i < powerBarSilder.Length; i++)
        {
            powerBarSilder[i].transform.localScale = new Vector3(0, 1, 1);
        }
    }

    public void SetDisplayUI()
    {
        letter.active = true;
        contentsText.text = InGameMrg_Main.inGame_mrg_main.Quest.contents;
        powerMark.sprite = DataMrg.dataMrg.powerInfo[InGameMrg_Main.inGame_mrg_main.Quest.powerNum].powerMark;
        leaderName.text = DataMrg.dataMrg.powerInfo[InGameMrg_Main.inGame_mrg_main.Quest.powerNum].leaderName;
        DataUIMrg.Instance.setDisplayData();    // 데이터를 다시 Display
    }

    public void OpenLeteer()
    {
        SoundMrg.Instance.StartEFF(0);
        letter.active = false;
        letterHead.active = true;
    }

    public void AanswerLetter(bool _answer)
    {
        SoundMrg.Instance.StartEFF(1);
        InGameMrg_Main.inGame_mrg_main.SetAnwserData(_answer);
        letterHead.active = false;
        MoveCameraLeft();
    }

    public void LoadPowerScene(int _Num)
    {
        SoundMrg.Instance.StartEFF(2);
        SoundMrg.Instance.FadeBGM(false, 0);
        SceneMrg.sceneMrg.NextScene(_Num);
    }

    public void SetPowerReport(int _powerIndex)
    {
        float value = 0.0f;

        value = ((float)(int)(1000 / (float)DataMrg.dataMrg.powerInfo[_powerIndex].maxVolume) * DataMrg.dataMrg.OutData(int.Parse("2" + _powerIndex.ToString()))) / 1000;
        if (value <= 0)
            DataMrg.dataMrg.powerReportData[_powerIndex] = 0;
        else
            DataMrg.dataMrg.powerReportData[_powerIndex] = value;

        for (int i = 0; i < 6; i++)
        {
            powerBarSilder[i].transform.localScale = new Vector3(DataMrg.dataMrg.powerReportData[i], powerBarSilder[i].transform.localScale.y, powerBarSilder[i].transform.localScale.z);
        }
    }

    public void ShowPowerReport()
    {
        
        SoundMrg.Instance.StartEFF(5);
        powerReport.active = true;
        if (DataMrg.dataMrg.isfrist)
            DataReset();
    }

    public void ExitPowerReport()
    {
        SoundMrg.Instance.StartEFF(5);
        powerReport.active = false;
    }

    public void MoveCameraLeft()
    {
        StartCoroutine(MoveLeft());
    }
    
    public void SoundOff(bool isBGM)
    {
        if (!isBGM)
        {
            if (SoundMrg.Instance.isEFFOff)
                EFF.sprite = BtnSprite[0];
            else
                EFF.sprite = BtnSprite[1];
        }
        else
        {
            if (SoundMrg.Instance.isBGMOff)
                BGM.sprite = BtnSprite[1];
            else
                BGM.sprite = BtnSprite[0];
        }
        SoundMrg.Instance.StopBGM(isBGM);
    }

    IEnumerator MoveLeft()
    {
        while (mainCamera.position.x <= sideVector.x-0.01)
        {
            mainCamera.transform.position = Vector3.Lerp(new Vector3(mainCamera.transform.position.x,0, mainCamera.transform.position.z), sideVector, Time.deltaTime * smooth);
            yield return new WaitForSeconds(0.005f);
        }
    }
}
