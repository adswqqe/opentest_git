using System.Collections;
using System.Collections.Generic;
using System.IO;
using UnityEngine;
using UnityEngine.UI;
using LitJson;

public class PowerInfo
{
    public string powerName;
    public string leaderName;
    public int maxVolume;
    public int powerIndex;
    public Sprite powerMark;

    public PowerInfo()
    {

    }

    public PowerInfo(string _powerName, string _leaderName, int _maxVolume, int _powerIndex, Sprite _powerMark)
    {
        powerName = _powerName;
        leaderName = _leaderName;
        maxVolume = _maxVolume;
        powerIndex = _powerIndex;
        powerMark = _powerMark;
    }

}

public class EventContents
{
    public int id;
    public int powerNum;
    public string contents;
    public int YspendGold;
    public int YspendDay;
    public string YwhatPowerUp;
    public int YupVolume;
    public string YwhatPowerDown;
    public int YdownVolume;
    public int NspendGold;
    public int NspendDay;
    public string NwhatPowerUp;
    public int NupVolume;
    public string NwhatPowerDown;
    public int NdownVolme;
    public int next;

    public EventContents ()
    {

    }

    public EventContents(int _id, int _powerNum, string _contents, int _YspendGold, int _YspendDay,
                         string _YwhatPowerUp, int _YupVolume, string _YwhatPowerDown, int _YdownVolume,
                         int _NspendGold, int _NspendDay, string _NwhatPowerUp, int _NupVolume,
                         string _NwhatPowerDown, int _NdownVolme, int _next)
    {
        this.id = _id;
        this.powerNum = _powerNum;
        this.contents = _contents;
        this.YspendGold = _YspendGold;
        this.YspendDay = _YspendDay;
        this.YwhatPowerUp = _YwhatPowerUp;
        this.YupVolume = _YupVolume;
        this.YwhatPowerDown = _YwhatPowerDown;
        this.YdownVolume = _YdownVolume;
        this.NspendGold = _YspendGold;
        this.NspendDay = _NspendDay;
        this.NwhatPowerUp = _NwhatPowerUp;
        this.NupVolume = _NupVolume;
        this.NwhatPowerDown = _NwhatPowerDown;
        this.NdownVolme = _NdownVolme;
        this.next = _next;

    }
}

public class DataMrg : MonoBehaviour    // 각종 데이터들을 관리 할 클래스
{
    public static DataMrg dataMrg;

    // public List<EventContents> eventContents = new List<EventContents>();
    string dataPath = "document";
    JsonData ContentsData;      // 편지의 내용, 처리 데이터가 들어가 있음.
    public enum ContentsDataKEY { id, powerNum, contents, YspendGold, YspendDay, YwhatPowerUp, YupVolume,
        YwhatPowerDown, YdownVolume, NspendGold, NspendDay, NwhatPowerUP, NupVolume, NwhatPowerDown, Ndownvolume, next};
    public bool hasLoding = false;
    const int maxContentsIndex = 28;
    int[] hasOverlap = new int[maxContentsIndex];
    bool isfrist = true;        // 처음일 경우 id 0번의 이벤트를 띄우기 위함
    int nextIndex = 0;
    // =============================== 세이브 로드 만들어야함
    // 관리할 데이터를 선언하자.
    int[] inGameDatas = new int[2] { 30, 300};     // 0.데이, 1.골드
    enum INDEX { DAY,GOLD};
    float[] forcesGoodFeelings = new float[6];  // 세력 0 부터 5까지 서류상에 나와있는대로이다.
    public PowerInfo[] powerInfo = new PowerInfo[6];
    public Sprite[] powerMark = new Sprite[6];

    void Awake ()
    {
        if (dataMrg == null)
            dataMrg = this;
        else if (dataMrg != this)
            Destroy(this.gameObject);

        DontDestroyOnLoad(this.gameObject);
    }

    public void setPowerInfo()
    {
        for(int i = 0; i < 6; i++)
        {
            powerInfo[i] = new PowerInfo();
        }
        ///////////////////////////////////////////////
        powerInfo[0].powerIndex = 0;
        powerInfo[0].maxVolume = 40;
        powerInfo[0].leaderName = "지라르 드 풍자크";
        powerInfo[0].powerName = "스툴툼";
        ///////////////////////////////////////////////

        ///////////////////////////////////////////////
        powerInfo[1].powerIndex = 1;
        powerInfo[1].maxVolume = 20;
        powerInfo[1].leaderName = "가이아나";
        powerInfo[1].powerName = "미티스트리";
        ///////////////////////////////////////////////        

        ///////////////////////////////////////////////
        powerInfo[2].powerIndex = 2;
        powerInfo[2].maxVolume = 5;
        powerInfo[2].leaderName = "에스터";
        powerInfo[2].powerName = "코토노하";
        ///////////////////////////////////////////////

        ///////////////////////////////////////////////
        powerInfo[3].powerIndex = 3;
        powerInfo[3].maxVolume = 10;
        powerInfo[3].leaderName = "스테인";
        powerInfo[3].powerName = "이스팔트";
        ///////////////////////////////////////////////

        ///////////////////////////////////////////////
        powerInfo[4].powerIndex = 4;
        powerInfo[4].maxVolume = 15;
        powerInfo[4].leaderName = "니어벨타";
        powerInfo[4].powerName = "그롬";
        ///////////////////////////////////////////////

        ///////////////////////////////////////////////
        powerInfo[5].powerIndex = 5;
        powerInfo[5].maxVolume = 10;
        powerInfo[5].leaderName = "아르티부스";
        powerInfo[5].powerName = "벌튼";
        ///////////////////////////////////////////////

        for (int i = 0; i < 6; i++)
        {
            powerInfo[i].powerMark = powerMark[i];
            forcesGoodFeelings[i] = powerInfo[i].maxVolume / 2;
        }

    }

    public EventContents SetContentsData()
    {
        bool isSelceting = true;
        int selcetIndex = 0;

        while (isSelceting) // 중복을 가려내는 작업
        {
            selcetIndex = Random.Range(0, maxContentsIndex);
            if (isfrist)
            {
                selcetIndex = 3;
                isfrist = false;
            }
            else if (nextIndex != 0)
            {
                selcetIndex = nextIndex;
                nextIndex = 0;
            }
            if (hasOverlap[selcetIndex] == 1)
                continue;
            else
            {
                hasOverlap[selcetIndex] = 1;
                break;
            }
        }
        Debug.Log("selcetIndex : " + selcetIndex);
        EventContents dumpContents = new EventContents(int.Parse(ContentsData[selcetIndex][ContentsDataKEY.id.ToString()].ToString()),
        int.Parse(ContentsData[selcetIndex][ContentsDataKEY.powerNum.ToString()].ToString()), ContentsData[selcetIndex][ContentsDataKEY.contents.ToString()].ToString(),
        int.Parse(ContentsData[selcetIndex][ContentsDataKEY.YspendGold.ToString()].ToString()), int.Parse(ContentsData[selcetIndex][ContentsDataKEY.YspendDay.ToString()].ToString()),
        ContentsData[selcetIndex][ContentsDataKEY.YwhatPowerUp.ToString()].ToString(), int.Parse(ContentsData[selcetIndex][ContentsDataKEY.YupVolume.ToString()].ToString()),
        ContentsData[selcetIndex][ContentsDataKEY.YwhatPowerDown.ToString()].ToString(), int.Parse(ContentsData[selcetIndex][ContentsDataKEY.YdownVolume.ToString()].ToString()),
        int.Parse(ContentsData[selcetIndex][ContentsDataKEY.NspendGold.ToString()].ToString()), int.Parse(ContentsData[selcetIndex][ContentsDataKEY.NspendDay.ToString()].ToString()),
        ContentsData[selcetIndex][ContentsDataKEY.NwhatPowerUP.ToString()].ToString(), int.Parse(ContentsData[selcetIndex][ContentsDataKEY.NupVolume.ToString()].ToString()),
        ContentsData[selcetIndex][ContentsDataKEY.NwhatPowerDown.ToString()].ToString(), int.Parse(ContentsData[selcetIndex][ContentsDataKEY.Ndownvolume.ToString()].ToString()),
        int.Parse(ContentsData[selcetIndex][ContentsDataKEY.next.ToString()].ToString()));

        nextIndex = dumpContents.next;
        return dumpContents;
    }

    public void InputData(int _index, int _data) //_index는 두자리의 수가 온다. 첫번째 자리가 1일 경우 InGameDatas 중에서 반환하고
                                                 // 2이 올 경우 호감도를 입력하는데 뒤에오는 숫자가 세부적으로 어떤 세력의 호감도를 입력할 지 정한다.
    {
        int chooseData = 999;   // 어떤 종류의 값을 원하는지
        int detailData = 999;   // 세부적인 데이터 값
        Debug.Log("Index : " + _index + "Data : " + _data);
        chooseData = _index / 10;   // 첫번째 자리를 찢는다
        detailData = _index % 10;   // 두번째 자리를 찢는다

        if (chooseData == 1)        // 게임 데이터
        {
            switch (detailData)
            {
                case 0:
                    inGameDatas[(int)INDEX.DAY] -= _data;
                    // Debug.Log(inGameDatas[(int)INDEX.DAY]);
                    break;
                case 1:
                    inGameDatas[(int)INDEX.GOLD] -= _data;
                    // Debug.Log(inGameDatas[(int)INDEX.GOLD]);
                    break;
                default:
                    Debug.Log("잘못된 값");
                    break;
            }
        }
        else if (chooseData == 2)   // 호감도
        {
            //Debug.Log("detailData : "  + detailData + ", 호감도 : " + forcesGoodFeelings[detailData]);
            forcesGoodFeelings[detailData] += _data;
        }

    }

    // 에러나면 float << int로 반환하도록 변환
    public float OutData(int _index)  //_index는 두자리의 수가 온다. 첫번째 자리가 1일 경우 InGameDatas 중에서 반환하고
                                    // 2이 올 경우 호감도를 반환하는데 뒤에오는 숫자가 세부적으로 어떤 세력의 호감도를 리턴할 지 정한다.
    {
        float returnData = 0;     // 리턴할 값을 담는 변수
        int chooseData = 999;   // 어떤 종류의 값을 원하는지
        int detailData = 999;   // 세부적인 데이터 값

        chooseData = _index / 10;
        detailData = _index % 10;

        if (chooseData == 1)        // 게임 데이터
        {
            switch (detailData)
            {
                case 0:
                    returnData = inGameDatas[(int)INDEX.DAY];
                    break;
                case 1:
                    returnData = inGameDatas[(int)INDEX.GOLD];
                    break;
                default:
                    Debug.Log("잘못된 값");
                    break;
            }
        }
        else if (chooseData == 2)   // 호감도
        {
            returnData = forcesGoodFeelings[detailData];
        }

        return returnData;
    }

    public void LoadFunc()
    {
        StartCoroutine(LoadCo());
    }

    IEnumerator LoadCo()
    {
        string jsonPath = pathForDocumentsFile("document.json");
        WWW www = new WWW(jsonPath);

        yield return www;

        string Jsonstring = www.text; //File.ReadAllText((readStringFromFile("document.json")));

        ContentsData = JsonMapper.ToObject(Jsonstring);

        ParsingJson(ContentsData);

        hasLoding = true;
        yield return null;
    }

    private void ParsingJson(JsonData _Contents)
    {
        Debug.Log(_Contents[1]["contents"]);
    }

    public void writeStringToFile(string str, string filename)
    {
#if !WEB_BUILD
        string path = pathForDocumentsFile(filename);
        FileStream file = new FileStream(path, FileMode.Create, FileAccess.Write);

        StreamWriter sw = new StreamWriter(file);
        sw.WriteLine(str);

        sw.Close();
        file.Close();
#endif
    }


    public string readStringFromFile(string filename)//, int lineIndex )
    {
#if !WEB_BUILD
        string path = pathForDocumentsFile(filename);
        Debug.Log(path);
        if (File.Exists(path))
        {
            FileStream file = new FileStream(path, FileMode.Open, FileAccess.Read);
            StreamReader sr = new StreamReader(file);

            string str = null;
            str = sr.ReadLine();

            sr.Close();
            file.Close();

            return str;
        }

        else
        {
            return null;
        }
#else
return null;
#endif
    }

    // 파일쓰고 읽는넘보다 이놈이 핵심이죠
    public string pathForDocumentsFile(string filename)
    {
        if (Application.platform == RuntimePlatform.IPhonePlayer)
        {
            Debug.Log("i");
            string path = Application.dataPath.Substring(0, Application.dataPath.Length - 5);
            path = path.Substring(0, path.LastIndexOf('/'));
            return Path.Combine(Path.Combine(path, "Documents"), filename);
        }

        else if (Application.platform == RuntimePlatform.Android)
        {
            Debug.Log("Application.streamingAssetsPath" + Application.streamingAssetsPath);
            string path = "jar:file://" + Application.dataPath + "!/assets/" + filename;
            return path;
        }

        else
        {
            //Debug.Log("PC");
            //string path = Application.streamingAssetsPath;
            ////path = path.Substring(0, path.LastIndexOf('/'));
            //Debug.Log(path);
            //return Path.Combine(path, filename);
            string path ="";
            path += ("file:///");
            path += (Application.streamingAssetsPath + "/" + filename);
            return path;

        }
    }
}
